snippet p
print('$1:', $1)
endsnippet

snippet pr
print('$0')
endsnippet

snippet pn
print('$1:', $1, sep='\n')
endsnippet

snippet pf
print('$1(\'{}\')'.format(($2)), $1($2))
endsnippet

snippet c
class $1:
	def __init__(self$2):
		$3
endsnippet

snippet f
def $1(self$2):
	$3
endsnippet

snippet ex
class $0(Exception): pass
endsnippet

snippet m
if __name__ == '__main__':
	$0
endsnippet

snippet s
self.$1 = $1
endsnippet

snippet prp
@property
def $1(self):
	return self.__$1
endsnippet

snippet sg
@property
def $1(self):
	return self.__$1

@$1.setter
def $1(self, value):
	self.__$1 = value
endsnippet

snippet sm
@staticmethod
endsnippet

snippet cm
@classmethod
endsnippet

snippet t
self._$1 = $1(self)
endsnippet

snippet _s
def __str__(self):
	return ''

def __repr__(self):
	return self.__str__()
endsnippet

snippet =
$1$2=$2$1
endsnippet

snippet _is
def __init__(self, $1):
	super().__init__($2)
endsnippet

snippet :
'$1': $1
endsnippet

snippet sp
'$1: {}'.format($1)
endsnippet

snippet _
__$1__$2
endsnippet

snippet b
def main():
	$0


if __name__ == '__main__':
	main()
endsnippet

snippet pj
print('$1:', json.dumps($1, indent=2), sep='\n')
endsnippet

snippet w
with $1 as $2:
	$3
endsnippet

snippet wa
with $1:
	$2
endsnippet

snippet o
with open($1, $2) as f:
	$3
endsnippet

snippet j
with open($1, 'r') as f:
	$2json.load(f)
endsnippet

snippet s_
	self.__$1 = $1

@property
def $1(self):
	return self.__$1
endsnippet

